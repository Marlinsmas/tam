from database_pattern import *
from vk_api.keyboard import VkKeyboardColor, VkKeyboard
from config import *
from ast import literal_eval as le
import pymysql




async def add_user(user_id):
    try:
        u = await Users.get_or_none(user_id=user_id)
        if u is None:
            user_info =await bot.api.users.get(user_ids=user_id, fields='city')
            first_name = user_info[0].first_name
            user_id = int(user_id)
            await Users.create(user_id=user_id, name=first_name, balance=0, donut=0, happiness=10, hunger=10,
                         health=10, energy=10)
            await UsersBoolean.create(user_id=user_id)
            await GameValues.create(user_id=user_id)
            await GameStat.create(user_id=user_id)
        else:
            return True
    except:
        print("–ø—Ä–æ–±–ª–µ–º–∞ –≤ add_user")


async def check_training(user_id):
    try:
        u = await Users.get(user_id=user_id)
        if u.train:
            return True
        else:
            return False
    except:
        return False


@bot.on.message(text=["–Ω–∞—á–∞—Ç—å", "–Ω–∞—á–∞–ª–æ", "—Å—Ç–∞—Ä—Ç"], lower=True)
async def start(ans: Message):

    if await check_training(ans.from_id):
        await ans("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ!")
        await menu(ans)
    else:
        await add_user(ans.from_id)
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("–Ø –≥–æ—Ç–æ–≤!", VkKeyboardColor.POSITIVE)
        keyboard = keyboard.get_keyboard()
        await ans("–¢—ã –≥–æ—Ç–æ–≤ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–∞—Ö?", keyboard=keyboard)
        await bot.branch.add(ans.peer_id, "start_branch")



@bot.branch.simple_branch("start_branch")
async def start_branch(ans: Message, response=None, payload=None):
    if ans.text.lower() == "—è –≥–æ—Ç–æ–≤!" or ans.payload == '1':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üêï –°–æ–±–∞–∫–∞", VkKeyboardColor.POSITIVE)
        keyboard.add_button("üêà –ö–æ—à–∫–∞", VkKeyboardColor.POSITIVE)
        keyboard = keyboard.get_keyboard()
        await ans("–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –±–æ–π—Ü–∞", keyboard=keyboard)

    elif ans.text == "üêï –°–æ–±–∞–∫–∞":
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button("–ë–µ—Ä—É!", VkKeyboardColor.POSITIVE, payload=11)
        keyboard.add_line()
        keyboard.add_button("–Ø –µ—â–µ –ø–æ–¥—É–º–∞—é...", VkKeyboardColor.NEGATIVE, payload=1)
        keyboard = keyboard.get_keyboard()
        await ans("–≠—Ç–æ —Å–æ–±–∫–∞ –æ—á–µ–Ω—å –∫—Ä—É—Ç–∞—è", keyboard=keyboard)


    elif ans.text == "üêà –ö–æ—à–∫–∞":
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button("–ë–µ—Ä—É!", VkKeyboardColor.POSITIVE, payload=12)
        keyboard.add_line()
        keyboard.add_button("–Ø –µ—â–µ –ø–æ–¥—É–º–∞—é...", VkKeyboardColor.NEGATIVE, payload=1)
        keyboard = keyboard.get_keyboard()
        await ans("–≠—Ç–æ –∫–æ—à–∫–∞ –æ—á–µ–Ω—å –∫—Ä—É—Ç–∞—è", keyboard=keyboard)

    elif ans.payload == '11':
        u = await Users.get(user_id=ans.peer_id)
        u.enimal = "—Å–æ–±–∞–∫–∞"
        await u.save()
        await ans("–ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å –≤–∞—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?")
        b = await UsersBoolean.get(user_id=ans.peer_id)
        b.train_flag = True
        await b.save()


    elif ans.payload == '12':
        u = await Users.get(user_id=ans.peer_id)
        u.enimal = "–∫–æ—à–∫–∞"
        await u.save()
        await ans("–ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å –≤–∞—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?")
        b = await UsersBoolean.get(user_id=ans.peer_id)
        b.train_flag = True
        await b.save()


    elif ans.payload == '13':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_button("‚ù§ –í—ã–ª–µ—á–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_button("‚öΩ –ü–æ–∏–≥—Ä–∞—Ç—å", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_line()
        keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.POSITIVE, payload=14)
        keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_line()
        keyboard.add_button("üë• –ö–ª—É–±—ã", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_button("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", VkKeyboardColor.DEFAULT, payload=13)
        keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å–∫–∞", VkKeyboardColor.DEFAULT, payload=13)
        keyboard = keyboard.get_keyboard()
        await ans(
            "‚û° –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –Ω–∞—É—á–∏—Ç—å —Ç–µ–±—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º. –°–µ–π—á–∞—Å –æ–Ω —Å–∏–ª—å–Ω–æ –≥–æ–ª–æ–¥–µ–Ω üòì! –ú—ã –∂–µ –Ω–µ —Ö–æ—Ç–∏–º —á—Ç–æ–±—ã –æ–Ω —É–º–µ—Ä?\n "
            "–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–æ –Ω—É–∂–Ω–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã üçñ.\n –ó–∞–π–¥–∏ –≤ üè™ –ú–∞–≥–∞–∑–∏–Ω", keyboard=keyboard)
        b = await UsersBoolean.get(user_id=ans.peer_id)
        b.train_flag = False
        await b.save()

    elif ans.payload == '14':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("ü•õ –ú–æ–ª–æ–∫–æ +5üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("ü•ï –ú–æ—Ä–∫–æ–≤—å +10üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üçû –•–ª–µ–± +15üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üç≥ –Ø–∏—á–Ω–∏—Ü–∞ +20üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üéÇ –¢–æ—Ä—Ç +25üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üçö –†–∏—Å +30üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üçï –ü–∏—Ü—Ü–∞ +35üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ +40üçñ -üí∏", VkKeyboardColor.POSITIVE, payload=15)
        keyboard.add_line()
        keyboard.add_button("ü•© –ú—è—Å–æ +45üçñ -üí∏", VkKeyboardColor.DEFAULT, payload=14)
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.DEFAULT, payload=14)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –ï–¥–∞ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω–µ –∏ —Å—ã—Ç–æ—Å—Ç–∏. –î–∞–≤–∞–π –∫—É–ø–∏–º üçó –ö—É—Ä–∏–Ω—É—é –Ω–æ–∂–∫—É. \n "
                  "40üçñ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—ã—Ç–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –µ–¥—ã, –∞ 100üí∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞", keyboard=keyboard)

    elif ans.payload == '15':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", VkKeyboardColor.POSITIVE, payload=16)
        keyboard.add_button("‚ù§ –í—ã–ª–µ—á–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_button("‚öΩ –ü–æ–∏–≥—Ä–∞—Ç—å", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_line()
        keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_line()
        keyboard.add_button("üë• –ö–ª—É–±—ã", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_button("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", VkKeyboardColor.DEFAULT, payload=15)
        keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å–∫–∞", VkKeyboardColor.DEFAULT, payload=15)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –ï–¥–∞ –∫—É–ø–ª–µ–Ω–∞, –Ω–æ –ø–∏—Ç–æ–º–µ—Ü –≤—Å–µ –µ—â—ë –≥–æ–ª–æ–¥–µ–Ω.", keyboard=keyboard)
        b = await UsersBoolean.get(user_id=ans.peer_id)
        b.train_flag = False
        await b.save()

    elif ans.payload == '16':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ - 1", VkKeyboardColor.POSITIVE, payload=17)
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.DEFAULT, payload=16)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞\n"
                  "–ü–æ–∫–æ—Ä–º–∏ –µ–≥–æ üçñ!", keyboard=keyboard)

    elif ans.payload == '17':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_button("‚ù§ –í—ã–ª–µ—á–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_button("‚öΩ –ü–æ–∏–≥—Ä–∞—Ç—å", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_line()
        keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.POSITIVE, payload=18)
        keyboard.add_line()
        keyboard.add_button("üë• –ö–ª—É–±—ã", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_button("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", VkKeyboardColor.DEFAULT, payload=17)
        keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å–∫–∞", VkKeyboardColor.DEFAULT, payload=17)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –ï—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è –∏ –ø–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å.\n"
                  "‚úÖ –•–æ—Ä–æ—à–∞—è - —Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü –±–æ–ª—å—à–µ –Ω–µ –≥–æ–ª–æ–¥–µ–Ω ‚ò∫! \n"
                  "‚ùå –ü–ª–æ—Ö–∞—è - –æ–Ω –ø–ª–æ—Ö–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç üòü \n"
                  "–¢–∞–∫–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –¥–æ–ª–≥–æ –Ω–µ –∫–æ—Ä–º–∏—à—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. \n"
                  "–ï–º—É —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –≤ üè• –ë–æ–ª—å–Ω–∏—Ü—É!", keyboard=keyboard)

    elif ans.payload == '18':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üíä –¢–∞–±–ª–µ—Ç–∫–∞ +10‚ù§ -üí∏", VkKeyboardColor.DEFAULT, payload=18)
        keyboard.add_line()
        keyboard.add_button("üíâ –®–ø—Ä–∏—Ü +40‚ù§ -üí∏", VkKeyboardColor.POSITIVE, payload=19)
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.DEFAULT, payload=18)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –î–∞–≤–∞–π –ø–æ–¥–ª–∞—Ç–∞–µ–º —Ç–æ–≤–µ–≥–æ –º–∞–ª—å—Ü–∞!\n"
                  "–ö—É–ø–∏ üíâ –®–ø—Ä–∏—Ü, –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.", keyboard=keyboard)

    elif ans.payload == '19':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_button("‚ù§ –í—ã–ª–µ—á–∏—Ç—å", VkKeyboardColor.POSITIVE, payload=20)
        keyboard.add_button("‚öΩ –ü–æ–∏–≥—Ä–∞—Ç—å", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_line()
        keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_line()
        keyboard.add_button("üë• –ö–ª—É–±—ã", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_button("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", VkKeyboardColor.DEFAULT, payload=19)
        keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å–∫–∞", VkKeyboardColor.DEFAULT, payload=19)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –õ–µ—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–∞–º–æ–º—É.", keyboard=keyboard)

    elif ans.payload == '20':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("üíä –¢–∞–±–ª–µ—Ç–∫–∞ 0", VkKeyboardColor.DEFAULT, payload=20)
        keyboard.add_line()
        keyboard.add_button("üíâ –®–ø—Ä–∏—Ü 1", VkKeyboardColor.POSITIVE, payload=21)
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.DEFAULT, payload=20)
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ—è –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–ø—Ç–µ—á–∫–∞ \n"
                  "–î–∞–≤–∞–π –ø–æ–¥–ª–∞—Ç–∞–µ–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ç–∞ ‚ù§", keyboard=keyboard)

    elif ans.payload == '21':
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", VkKeyboardColor.POSITIVE, payload={"button":"–º–µ–Ω—é"})
        keyboard = keyboard.get_keyboard()
        await ans("‚û° –í–æ—Ç –∏ –≤—Å–µ! –¢–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–±–æ—Ç—å—Å—è –æ —Å–≤–æ–µ–º –ø–∏—Ç–æ–º—Ü–µ –∏ –Ω–µ –æ–±–∏–∂–∞–π –µ–≥–æ", keyboard=keyboard)
        u = await Users.get(user_id=ans.peer_id)
        u.train = True
        await u.save()
        await bot.branch.exit(ans.peer_id)

    else:
        b = await UsersBoolean.get(user_id=ans.peer_id)
        if b.train_flag:
            print(1)
            name = ans.text
            u = await Users.get(user_id=ans.peer_id)
            u.nickname = name
            await u.save()
            keyboard = VkKeyboard(one_time=False)
            keyboard.add_button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", VkKeyboardColor.POSITIVE, payload=13)
            keyboard = keyboard.get_keyboard()
            await ans(f"{name} –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è!", keyboard=keyboard)





@bot.on.message(text="1", lower=True)
async def menu(ans: Message):
    pass



@bot.on.message(PayloadRule({"button":"–º–µ–Ω—é"}))
@bot.on.message(text="–º–µ–Ω—é", lower=True)
async def menu(ans: Message):

    if await check_training(ans.from_id):
        info = await UsersBoolean.get(user_id=ans.peer_id)

        if not info.check_death:
            keyboard = VkKeyboard(one_time=False)
            keyboard.add_button("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", VkKeyboardColor.POSITIVE, payload={"button":"–ø–æ–∫–æ—Ä–º–∏—Ç—å"})
            keyboard.add_button("‚ù§Ô∏è –í—ã–ª–µ—á–∏—Ç—å", VkKeyboardColor.POSITIVE, payload={"button":"–≤—ã–ª–µ—á–∏—Ç—å"})
            keyboard.add_button("‚öΩ –ü–æ–∏–≥—Ä–∞—Ç—å", VkKeyboardColor.POSITIVE, payload={"button":"–ø–æ–∏–≥—Ä–∞—Ç—å"})
            keyboard.add_line()
            keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.NEGATIVE, payload={"button":"–º–∞–≥–∞–∑–∏–Ω"})
            keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.NEGATIVE, payload={"button":"–±–æ–ª—å–Ω–∏—Ü–∞"})
            keyboard.add_line()
            keyboard.add_button("üë• –ö–ª—É–±—ã", VkKeyboardColor.PRIMARY, payload={"button":"–∫–ª—É–±—ã"})
            keyboard.add_button("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", VkKeyboardColor.PRIMARY, payload={"button":"—Ä–∞—Å—Å—ã–ª–∫–∞"})
            keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å–∫–∞", VkKeyboardColor.PRIMARY, payload={"button":"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"})
            keyboard = keyboard.get_keyboard()
            await ans("–ú–µ–Ω—é:", keyboard=keyboard, attachment="photo-197028739_457239017")

            if not info.check_one_click:
                print("–ü–µ—Ä–≤—ã–π —Ä–∞–∑")
                info.check_one_click = 1
                await info.save()
                await checker(ans.peer_id)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –ø–æ–≥–∏–±...")
            await death(user_id=ans.peer_id)




    else:
        await ans("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É."
                             "\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–∞—á–∞—Ç—å\"")


@bot.on.message(PayloadRule({"button":"–ø–æ–∫–æ—Ä–º–∏—Ç—å"}))
async def feed(ans: Message):
    u = await GameValues.get(user_id=ans.peer_id)
    keyboard = VkKeyboard(one_time=False)
    if u.milk > 0:
        keyboard.add_button(f"ü•õ –ú–æ–ª–æ–∫–æ +5üçñ - {u.milk}", VkKeyboardColor.DEFAULT, payload={"button":"–º–æ–ª–æ–∫–æ"})
        keyboard.add_line()
    if u.carrot > 0:
        keyboard.add_button(f"ü•ï –ú–æ—Ä–∫–æ–≤—å +10üçñ - {u.carrot}", VkKeyboardColor.DEFAULT, payload={"button":"–º–æ—Ä–∫–æ–≤—å"})
        keyboard.add_line()
    if u.bread > 0:
        keyboard.add_button(f"üçû –•–ª–µ–± +15üçñ - {u.bread}", VkKeyboardColor.DEFAULT, payload={"button":"—Ö–ª–µ–±"})
        keyboard.add_line()
    if u.agg > 0:
        keyboard.add_button(f"üç≥ –Ø–∏—á–Ω–∏—Ü–∞ +20üçñ - {u.agg}", VkKeyboardColor.DEFAULT, payload={"button":"—è–∏—á–Ω–∏—Ü–∞"})
        keyboard.add_line()
    if u.cake > 0:
        keyboard.add_button(f"üéÇ –¢–æ—Ä—Ç +25üçñ - {u.cake}", VkKeyboardColor.DEFAULT, payload={"button":"—Ç–æ—Ä—Ç"})
        keyboard.add_line()
    if u.rice > 0:
        keyboard.add_button(f"üçö –†–∏—Å +30üçñ - {u.rice}", VkKeyboardColor.DEFAULT, payload={"button":"—Ä–∏—Å"})
        keyboard.add_line()
    if u.pizza > 0:
        keyboard.add_button(f"üçï –ü–∏—Ü—Ü–∞ +35üçñ - {u.pizza}", VkKeyboardColor.DEFAULT, payload={"button":"–ø–∏—Ü—Ü–∞"})
        keyboard.add_line()
    if u.leg > 0:
        keyboard.add_button(f"üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ +40üçñ - {u.leg}", VkKeyboardColor.DEFAULT, payload={"button":"–Ω–æ–∂–∫–∞"})
        keyboard.add_line()
    if u.meat > 0:
        keyboard.add_button(f"ü•© –ú—è—Å–æ +45üçñ - {u.meat}", VkKeyboardColor.DEFAULT, payload={"button":"–º—è—Å–æ"})
        keyboard.add_line()



    if u.milk == 0 and u.carrot == 0 and u.bread == 0 and u.cake == 0 and u.rice == 0 and u.pizza == 0 and u.leg == 0 and u.meat == 0:
        print("1")
        keyboard.add_button("üè™ –ú–∞–≥–∞–∑–∏–Ω", VkKeyboardColor.DEFAULT, payload={"button":"–º–∞–≥–∞–∑–∏–Ω"})
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
        keyboard = keyboard.get_keyboard()
        await ans("–£ –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ—Ç –µ–¥—ã..\n –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –ø—Ä–∏–∫—É–ø–∏—Ç–µ —á–µ–≥–æ-–Ω–∏–±—É–¥—å:", keyboard=keyboard)
    else:
        info = await Users.get(user_id=ans.peer_id)
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
        keyboard = keyboard.get_keyboard()
        await ans(f"–°—ã—Ç–æ—Å—Ç—å - {info.hunger}/50", keyboard=keyboard)

    if u.milk > 0 or u.carrot > 0 or u.bread > 0 or u.cake > 0 or u.rice > 0 or u.pizza > 0 or u.leg > 0 or u.meat > 0:
        await bot.branch.add(ans.peer_id, "feed_branch")


@bot.branch.simple_branch("feed_branch")
async def feed_branch(ans: Message):
    button = None
    if ans.payload is not None:
        button = le(ans.payload)
        print(button["button"])  # –î–æ—Å—Ç–∞–µ–º –∏–∑ payload –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫: if ans.payload == "{\"button\":\"–Ω–∞–∑–∞–¥\"}":
        button = button["button"]
    u = await GameValues.get(user_id=ans.peer_id)
    info = await Users.get(user_id=ans.peer_id)
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–Ω–∞–∑–∞–¥"})
    keyboard = keyboard.get_keyboard()
    if button == "–º–æ–ª–æ–∫–æ":
        if info.hunger < 50:
            u.milk = u.milk - 1
            info.hunger = info.hunger + 5
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "–º–æ—Ä–∫–æ–≤—å":
        if info.hunger < 50:
            u.carrot = u.carrot - 1
            info.hunger = info.hunger + 10
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "—Ö–ª–µ–±":
        if info.hunger < 50:
            u.bread = u.bread - 1
            info.hunger = info.hunger + 15
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "—è–∏—á–Ω–∏—Ü–∞":
        if info.hunger < 50:
            u.agg = u.agg - 1
            info.hunger = info.hunger + 15
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "—Ç–æ—Ä—Ç":
        if info.hunger < 50:
            u.cake = u.cake - 1
            info.hunger = info.hunger + 25
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "—Ä–∏—Å":
        if info.hunger < 50:
            u.rice = u.rice - 1
            info.hunger = info.hunger + 30
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "–ø–∏—Ü—Ü–∞":
        if info.hunger < 50:
            u.pizza = u.pizza - 1
            info.hunger = info.hunger + 35
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "–Ω–æ–∂–∫–∞":
        if info.hunger < 50:
            u.leg = u.leg - 1
            info.hunger = info.hunger + 40
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)

        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "–º—è—Å–æ":
        if info.hunger < 50:
            u.meat = u.meat - 1
            info.hunger = info.hunger + 45
            if info.hunger > 50:
                info.hunger = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await feed(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)


    elif button == "–º–µ–Ω—é":
        await menu(ans)
        await bot.branch.exit(ans.peer_id)

    elif button == "–Ω–∞–∑–∞–¥":
        await feed(ans)
        await bot.branch.exit(ans.peer_id)

    else:
        await ans("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\"")




@bot.on.message(PayloadRule({"button":"–≤—ã–ª–µ—á–∏—Ç—å"}))
async def heal(ans: Message):
    u = await GameValues.get(user_id=ans.peer_id)
    keyboard = VkKeyboard(one_time=False)
    if u.tablet > 0:
        keyboard.add_button(f"üíä –¢–∞–±–ª–µ—Ç–∫–∞ +10‚ù§ - {u.tablet}", VkKeyboardColor.DEFAULT, payload={"button": "—Ç–∞–±–ª–µ—Ç–∫–∞"})
        keyboard.add_line()
    if u.injector > 0:
        keyboard.add_button(f"üíâ –®–ø—Ä–∏—Ü +40‚ù§ - {u.injector}", VkKeyboardColor.DEFAULT, payload={"button": "—à–ø—Ä–∏—Ü"})
        keyboard.add_line()
    if u.tablet == 0 and u.injector == 0:
        keyboard.add_button("üè• –ë–æ–ª—å–Ω–∏—Ü–∞", VkKeyboardColor.DEFAULT, payload={"button": "–±–æ–ª—å–Ω–∏—Ü–∞"})
        keyboard.add_line()
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
        keyboard = keyboard.get_keyboard()
        await ans("–£ –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤..\n –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –±–æ–ª—å–Ω–∏—Ü—É –∏ –ø—Ä–∏–∫—É–ø–∏—Ç–µ —á–µ–≥–æ-–Ω–∏–±—É–¥—å:", keyboard=keyboard)
    else:
        info = await Users.get(user_id=ans.peer_id)
        keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
        keyboard = keyboard.get_keyboard()
        await ans(f"–ó–¥–æ—Ä–æ–≤—å–µ {info.health}/50", keyboard=keyboard)
    if u.tablet > 0 or u.injector > 0:
        await bot.branch.add(ans.peer_id, "heal_branch")

@bot.branch.simple_branch("heal_branch")
async def heal_branch(ans: Message):
    button = None
    if ans.payload is not None:
        button = le(ans.payload)
        print(button["button"])  # –î–æ—Å—Ç–∞–µ–º –∏–∑ payload –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫: if ans.payload == "{\"button\":\"–Ω–∞–∑–∞–¥\"}":
        button = button["button"]
    u = await GameValues.get(user_id=ans.peer_id)
    info = await Users.get(user_id=ans.peer_id)
    if button == "—Ç–∞–±–ª–µ—Ç–∫–∞":
        if info.health < 50:
            u.tablet = u.tablet - 1
            info.health = info.health + 10
            info.statBal = info.statBal + 100
            if info.health > 50:
                info.health = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await heal(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –∑–¥–æ—Ä–æ–≤")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "—à–ø—Ä–∏—Ü":
        if info.health < 50:
            u.injector = u.injector - 1
            info.health = info.health + 40
            info.statBal = info.statBal + 100
            if info.health > 50:
                info.health = 50

            await u.save()
            await info.save()
            await bot.branch.exit(ans.peer_id)
            await heal(ans)
        else:
            await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –∑–¥–æ—Ä–æ–≤")
            await bot.branch.exit(ans.peer_id)
            await menu(ans)

    elif button == "–º–µ–Ω—é":
        await menu(ans)
        await bot.branch.exit(ans.peer_id)


    else:
        await ans("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\"")



@bot.on.message(PayloadRule({"button":"–º–∞–≥–∞–∑–∏–Ω"}))
async def shop(ans: Message):
    u = await GameValues.get(user_id=ans.peer_id)
    keyboard = VkKeyboard(one_time=False)

    keyboard.add_button(f"ü•õ –ú–æ–ª–æ–∫–æ +5üçñ - {u.milk}", VkKeyboardColor.DEFAULT, payload={"button":"–º–æ–ª–æ–∫–æ"})
    keyboard.add_line()

    keyboard.add_button(f"ü•ï –ú–æ—Ä–∫–æ–≤—å +10üçñ - {u.carrot}", VkKeyboardColor.DEFAULT, payload={"button":"–º–æ—Ä–∫–æ–≤—å"})
    keyboard.add_line()

    keyboard.add_button(f"üçû –•–ª–µ–± +15üçñ - {u.bread}", VkKeyboardColor.DEFAULT, payload={"button":"—Ö–ª–µ–±"})
    keyboard.add_line()

    keyboard.add_button(f"üç≥ –Ø–∏—á–Ω–∏—Ü–∞ +20üçñ - {u.agg}", VkKeyboardColor.DEFAULT, payload={"button":"—è–∏—á–Ω–∏—Ü–∞"})
    keyboard.add_line()

    keyboard.add_button(f"üéÇ –¢–æ—Ä—Ç +25üçñ - {u.cake}", VkKeyboardColor.DEFAULT, payload={"button":"—Ç–æ—Ä—Ç"})
    keyboard.add_line()

    keyboard.add_button(f"üçö –†–∏—Å +30üçñ - {u.rice}", VkKeyboardColor.DEFAULT, payload={"button":"—Ä–∏—Å"})
    keyboard.add_line()

    keyboard.add_button(f"üçï –ü–∏—Ü—Ü–∞ +35üçñ - {u.pizza}", VkKeyboardColor.DEFAULT, payload={"button":"–ø–∏—Ü—Ü–∞"})
    keyboard.add_line()

    keyboard.add_button(f"üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ +40üçñ - {u.leg}", VkKeyboardColor.DEFAULT, payload={"button":"–Ω–æ–∂–∫–∞"})
    keyboard.add_line()

    keyboard.add_button(f"ü•© –ú—è—Å–æ +45üçñ - {u.meat}", VkKeyboardColor.DEFAULT, payload={"button":"–º—è—Å–æ"})
    keyboard.add_line()

    keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
    keyboard = keyboard.get_keyboard()
    await ans("–î–æ—Å—Ç—É–ø–Ω–æ:", keyboard=keyboard)
    await bot.branch.add(ans.peer_id, "shop_branch")


@bot.branch.simple_branch("shop_branch")
async def shop_branch(ans: Message):
    button = None
    if ans.payload is not None:
        button = le(ans.payload)
        print(button["button"])  # –î–æ—Å—Ç–∞–µ–º –∏–∑ payload –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫: if ans.payload == "{\"button\":\"–Ω–∞–∑–∞–¥\"}":
        button = button["button"]
    u = await GameValues.get(user_id=ans.peer_id)
    info = await Users.get(user_id=ans.peer_id)

    if button == "–º–æ–ª–æ–∫–æ":
        if info.balance >= 100:
            u.milk = u.milk + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º–æ–ª–æ–∫–æ!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–º–æ—Ä–∫–æ–≤—å":
        if info.balance >= 100:
            u.carrot = u.carrot + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100

            await info.save()
            await u.save()
            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º–æ—Ä–∫–æ–≤—å!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "—Ö–ª–µ–±":
        if info.balance >= 100:
            u.bread = u.bread + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ö–ª–µ–±!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "—è–∏—á–Ω–∏—Ü–∞":
        if info.balance >= 100:
            u.agg = u.agg + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —è–∏—á–Ω–∏—Ü—É!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "—Ç–æ—Ä—Ç":
        if info.balance >= 100:
            u.cake = u.cake + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ—Ä—Ç!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "—Ä–∏—Å":
        if info.balance >= 100:
            u.rice = u.rice + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–∏—Å!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–ø–∏—Ü—Ü–∞":
        if info.balance >= 100:
            u.pizza = u.pizza + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–∏—Ü—Ü—É!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–Ω–æ–∂–∫–∞":
        if info.balance >= 100:
            u.leg = u.leg + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫—É—Ä–∏–Ω—É—é –Ω–æ–∂–∫—É!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–º—è—Å–æ":
        if info.balance >= 100:
            u.meat = u.meat + 1
            info.balance = info.balance - 100
            info.statBal = info.statBal + 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º—è—Å–æ!")
            await bot.branch.exit(ans.peer_id)
            await shop(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–º–µ–Ω—é":
        await menu(ans)
        await bot.branch.exit(ans.peer_id)



    else:
        await ans("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\"")



@bot.on.message(PayloadRule({"button":"–±–æ–ª—å–Ω–∏—Ü–∞"}))
async def hospital(ans: Message):
    u = await GameValues.get(user_id=ans.peer_id)
    keyboard = VkKeyboard(one_time=False)

    keyboard.add_button(f"üíä –¢–∞–±–ª–µ—Ç–∫–∞ +10‚ù§  $- {u.tablet}", VkKeyboardColor.DEFAULT, payload={"button": "—Ç–∞–±–ª–µ—Ç–∫–∞"})
    keyboard.add_line()

    keyboard.add_button(f"üíâ –®–ø—Ä–∏—Ü +40‚ù§  $- {u.injector}", VkKeyboardColor.DEFAULT, payload={"button": "—à–ø—Ä–∏—Ü"})
    keyboard.add_line()

    keyboard.add_button("üîô –ù–∞–∑–∞–¥", VkKeyboardColor.POSITIVE, payload={"button": "–º–µ–Ω—é"})
    keyboard = keyboard.get_keyboard()
    await ans(f"–î–æ—Å—Ç—É–ø–Ω–æ:", keyboard=keyboard)
    await bot.branch.add(ans.peer_id, "hospital_branch")



@bot.branch.simple_branch("hospital_branch")
async def hospital_branch(ans: Message):
    button = None
    if ans.payload is not None:
        button = le(ans.payload)
        print(button["button"])  # –î–æ—Å—Ç–∞–µ–º –∏–∑ payload –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫: if ans.payload == "{\"button\":\"–Ω–∞–∑–∞–¥\"}":
        button = button["button"]
    u = await GameValues.get(user_id=ans.peer_id)
    info = await Users.get(user_id=ans.peer_id)
    if button == "—Ç–∞–±–ª–µ—Ç–∫–∞":
        if info.balance >= 100:
            u.tablet = u.tablet + 1
            info.balance = info.balance - 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–∞–±–ª–µ—Ç–∫—É!")
            await bot.branch.exit(ans.peer_id)
            await hospital(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "—à–ø—Ä–∏—Ü":
        if info.balance >= 100:
            u.injector = u.injector + 1
            info.balance = info.balance - 100
            await info.save()
            await u.save()

            await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —à–ø—Ä–∏—Ü!")
            await bot.branch.exit(ans.peer_id)
            await hospital(ans)
        else:
            await ans("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

    elif button == "–º–µ–Ω—é":
        await menu(ans)
        await bot.branch.exit(ans.peer_id)

    else:
        await ans("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\"")


async def checker(user_id):
    while True:
        # try:
        min = 6 * 60
        await asyncio.sleep(5)
        u = await Users.get(user_id=user_id)

        if u.hunger - 1 >= 0:
            u.hunger = u.hunger - 1
            await u.save()

        if u.hunger > 10:
            if u.energy + 1 < 50:
                u.energy = u.energy + 1
                await u.save()

        if u.happiness - 1 >= 0:
            u.happiness = u.happiness - 1
            await u.save()

        if u.hunger == 0:
            if u.health - 0.1 >= 0:
                u.health = u.health - 0.1
                await u.save()

        if u.hunger == 10:
            await bot.api.messages.send(peer_id=user_id, message="–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω", random_id=0)

        if u.health == 20:
            await bot.api.messages.send(peer_id=user_id, message="–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ—Ö–Ω–µ—Ç", random_id=0)

        if u.energy == 49:
            await bot.api.messages.send(peer_id=user_id, message="–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å", random_id=0)

        if u.happiness == 20:
            await bot.api.messages.send(peer_id=user_id, message="–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–æ—Å–∫—É—á–∏–ª—Å—è", random_id=0)
        # except:
        #     print("–ü—Ä–æ–±–ª–µ–º–∞")
        #     continue

        if u.health == 0:
            await bot.api.messages.send(peer_id=user_id, message="–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–¥–æ—Ö:", random_id=0)
            await death(user_id=user_id)
            break

        print(1)


async def death(user_id=None):
    # if user_id is None:
    #     user_id == ans.peer_id
    #     print(user_id)
    b = await UsersBoolean.get(user_id=user_id)
    b.check_death = 1
    await b.save()
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button("–í–æ—Å–∫—Ä–µ—Å–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", VkKeyboardColor.POSITIVE, payload={"button":"–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ"})
    keyboard.add_line()
    keyboard.add_button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", VkKeyboardColor.NEGATIVE, {"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
    keyboard = keyboard.get_keyboard()
    if user_id is not None:
        await bot.api.messages.send(peer_id=user_id, message="–î–æ—Å—Ç—É–ø–Ω–æ:", random_id=0, keyboard=keyboard)
    # else:
    #     await ans("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–¥–æ—Ö", keyboard=keyboard)

@bot.on.message(PayloadRule({"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–µ—Ç"}))
async def pere(ans: Message):
    await death(ans.peer_id)


@bot.on.message(PayloadRule({"button":"–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ"}))
async def resurrection(ans: Message):
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button("–ù–µ—Ç", VkKeyboardColor.NEGATIVE, payload={"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–µ—Ç"})
    keyboard.add_button("–î–∞", VkKeyboardColor.POSITIVE, payload={"button":"–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –¥–∞"})
    keyboard = keyboard.get_keyboard()
    await ans("–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç 25 –¥–æ–Ω–∞—Ç –º–æ–Ω–µ—Ç, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", keyboard=keyboard)


@bot.on.message(PayloadRule({"button":"–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –¥–∞"}))
async def resurrection_continue(ans: Message):
    u = await Users.get(user_id=ans.peer_id)
    if u.donut >= 25:
        u.donut = u.donut - 25
        u.health = 50
        u.happiness = 25
        u.hunger = 25
        u.energy = 25
        await u.save()
        b = await UsersBoolean.get(user_id=ans.peer_id)
        b.check_death = 0
        await b.save()
        await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–∑—Ä–æ–¥–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!")
        await menu(ans)
    else:
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button("–í–µ—Ä–Ω—É—Ç—å—Å—è", VkKeyboardColor.DEFAULT, payload={"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–µ—Ç"})
        keyboard.add_button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", VkKeyboardColor.POSITIVE, payload={"button": "–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"})
        keyboard = keyboard.get_keyboard()
        await ans("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?", keyboard=keyboard)

@bot.on.message(PayloadRule({"button": "–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"}))
async def replenishment(ans: Message):
    pass


@bot.on.message(PayloadRule({"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"}))
async def start_over(ans: Message):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button("–ù–µ—Ç", VkKeyboardColor.POSITIVE, payload={"button": "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–µ—Ç"})
    keyboard.add_button("–î–∞", VkKeyboardColor.NEGATIVE, payload={"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –¥–∞"})
    keyboard = keyboard.get_keyboard()
    await ans("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ? –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–µ—Å—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω",
              keyboard=keyboard)


host1='localhost'
host2='91.210.170.247'

def get_connection():
    connection = pymysql.connect(host=host2,
                                 user='maslinka',
                                 password='897555887Dan!',
                                 db='test',
                                 charset='utf8mb4'
                                 )
    return connection

@bot.on.message(PayloadRule({"button":"–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –¥–∞"}))
async def start_anew(ans: Message):
    conn = get_connection()
    c = conn.cursor()
    c.execute("DELETE FROM `user_boolean` WHERE user_id = %s", (ans.from_id,))
    c.execute("DELETE FROM `user_info` WHERE user_id = %s", (ans.from_id,))
    c.execute("DELETE FROM `user_stat` WHERE user_id = %s", (ans.from_id,))
    c.execute("DELETE FROM `user_values` WHERE user_id = %s", (ans.from_id,))
    conn.commit()
    conn.close()
    await ans("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ!"
              "\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–∞—á–∞—Ç—å\"")




bot.run_polling(skip_updates=True, on_startup=init_db)